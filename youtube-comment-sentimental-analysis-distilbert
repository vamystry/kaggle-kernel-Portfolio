{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":10599713,"sourceType":"datasetVersion","datasetId":6560918}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/suvammistry/youtube-comment-sentimental-analysis-distilbert?scriptVersionId=246753679\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom datasets import Dataset, DatasetDict\nfrom transformers import AutoTokenizer, TrainingArguments, Trainer\nfrom transformers import AutoModelForSequenceClassification as SeqModClf\nimport torch\nimport numpy \nfrom sklearn.metrics import accuracy_score, f1_score","metadata":{"_uuid":"819ca256-1c8a-4b3f-9c10-8c0044b8974c","_cell_guid":"1855c390-d45c-4e59-8f28-2afb4177a138","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.056391Z","iopub.execute_input":"2025-04-10T07:55:54.056735Z","iopub.status.idle":"2025-04-10T07:55:54.0612Z","shell.execute_reply.started":"2025-04-10T07:55:54.056706Z","shell.execute_reply":"2025-04-10T07:55:54.060258Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"dataset = pd.read_csv(\"/kaggle/input/youtube-comments-dataset/YoutubeCommentsDataSet.csv\")\n\ndataset.head()","metadata":{"_uuid":"764982a1-a2ff-497a-9032-f8e03bb6ec85","_cell_guid":"bd6927ec-3e9c-432b-92af-22add801307c","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.098683Z","iopub.execute_input":"2025-04-10T07:55:54.098908Z","iopub.status.idle":"2025-04-10T07:55:54.177031Z","shell.execute_reply.started":"2025-04-10T07:55:54.098888Z","shell.execute_reply":"2025-04-10T07:55:54.176253Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"                                             Comment Sentiment\n0  lets not forget that apple pay in 2014 require...   neutral\n1  here in nz 50 of retailers don’t even have con...  negative\n2  i will forever acknowledge this channel with t...  positive\n3  whenever i go to a place that doesn’t take app...  negative\n4  apple pay is so convenient secure and easy to ...  positive","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Comment</th>\n      <th>Sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>lets not forget that apple pay in 2014 require...</td>\n      <td>neutral</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>here in nz 50 of retailers don’t even have con...</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>i will forever acknowledge this channel with t...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>whenever i go to a place that doesn’t take app...</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>apple pay is so convenient secure and easy to ...</td>\n      <td>positive</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"dataset.info()","metadata":{"_uuid":"9c02db74-2250-43f1-b8d7-e44681a107de","_cell_guid":"4568a1e0-eef5-4f4a-8030-894ad776a766","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.17803Z","iopub.execute_input":"2025-04-10T07:55:54.178271Z","iopub.status.idle":"2025-04-10T07:55:54.188824Z","shell.execute_reply.started":"2025-04-10T07:55:54.178252Z","shell.execute_reply":"2025-04-10T07:55:54.188029Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18408 entries, 0 to 18407\nData columns (total 2 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   Comment    18364 non-null  object\n 1   Sentiment  18408 non-null  object\ndtypes: object(2)\nmemory usage: 287.8+ KB\n","output_type":"stream"}],"execution_count":39},{"cell_type":"markdown","source":"# Removing null values","metadata":{}},{"cell_type":"code","source":"dataset.isnull().sum()","metadata":{"_uuid":"310b502f-32c8-435f-8fe4-2502937392a5","_cell_guid":"51d72a18-8ad9-4eaf-913e-7290fe7abd86","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.190488Z","iopub.execute_input":"2025-04-10T07:55:54.190684Z","iopub.status.idle":"2025-04-10T07:55:54.207728Z","shell.execute_reply.started":"2025-04-10T07:55:54.190667Z","shell.execute_reply":"2025-04-10T07:55:54.207061Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"Comment      44\nSentiment     0\ndtype: int64"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"dataset.dropna()","metadata":{"_uuid":"e14f38c0-77d0-4f6a-8fc5-31f7431fa05a","_cell_guid":"19ed316f-fa78-47b4-9ad7-50a01c33f3bd","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.20897Z","iopub.execute_input":"2025-04-10T07:55:54.209294Z","iopub.status.idle":"2025-04-10T07:55:54.229714Z","shell.execute_reply.started":"2025-04-10T07:55:54.209263Z","shell.execute_reply":"2025-04-10T07:55:54.228982Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"                                                 Comment Sentiment\n0      lets not forget that apple pay in 2014 require...   neutral\n1      here in nz 50 of retailers don’t even have con...  negative\n2      i will forever acknowledge this channel with t...  positive\n3      whenever i go to a place that doesn’t take app...  negative\n4      apple pay is so convenient secure and easy to ...  positive\n...                                                  ...       ...\n18403  i really like the point about engineering tool...  positive\n18404  i’ve just started exploring this field and thi...  positive\n18405  excelente video con una pregunta filosófica pr...   neutral\n18406  hey daniel just discovered your channel a coup...  positive\n18407  this is great focus is key a playful approach ...  positive\n\n[18364 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Comment</th>\n      <th>Sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>lets not forget that apple pay in 2014 require...</td>\n      <td>neutral</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>here in nz 50 of retailers don’t even have con...</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>i will forever acknowledge this channel with t...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>whenever i go to a place that doesn’t take app...</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>apple pay is so convenient secure and easy to ...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>18403</th>\n      <td>i really like the point about engineering tool...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>18404</th>\n      <td>i’ve just started exploring this field and thi...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>18405</th>\n      <td>excelente video con una pregunta filosófica pr...</td>\n      <td>neutral</td>\n    </tr>\n    <tr>\n      <th>18406</th>\n      <td>hey daniel just discovered your channel a coup...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>18407</th>\n      <td>this is great focus is key a playful approach ...</td>\n      <td>positive</td>\n    </tr>\n  </tbody>\n</table>\n<p>18364 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":41},{"cell_type":"markdown","source":"# Label encoding","metadata":{}},{"cell_type":"code","source":"#encode train & test\ndef encode_labels(dataset):\n     dataset['Sentiment'] = dataset['Sentiment'].replace({'negative':0,'neutral':1,'positive':2})\n     return dataset\n\nencoded_dataset = encode_labels(dataset)\n\nencoded_dataset.head()","metadata":{"_uuid":"bceba50e-fd9c-4dfe-a4a7-8d5ebe5d1616","_cell_guid":"a40f7e75-e14e-42b8-8af9-43a9e14b644b","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.230452Z","iopub.execute_input":"2025-04-10T07:55:54.230681Z","iopub.status.idle":"2025-04-10T07:55:54.247651Z","shell.execute_reply.started":"2025-04-10T07:55:54.230663Z","shell.execute_reply":"2025-04-10T07:55:54.246866Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stderr","text":"<ipython-input-42-f3142a1c3b9c>:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n  dataset['Sentiment'] = dataset['Sentiment'].replace({'negative':0,'neutral':1,'positive':2})\n","output_type":"stream"},{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"                                             Comment  Sentiment\n0  lets not forget that apple pay in 2014 require...          1\n1  here in nz 50 of retailers don’t even have con...          0\n2  i will forever acknowledge this channel with t...          2\n3  whenever i go to a place that doesn’t take app...          0\n4  apple pay is so convenient secure and easy to ...          2","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Comment</th>\n      <th>Sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>lets not forget that apple pay in 2014 require...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>here in nz 50 of retailers don’t even have con...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>i will forever acknowledge this channel with t...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>whenever i go to a place that doesn’t take app...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>apple pay is so convenient secure and easy to ...</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":42},{"cell_type":"markdown","source":"# renaming column names","metadata":{}},{"cell_type":"code","source":"encoded_dataset = encoded_dataset.rename(columns={'Comment': 'text', 'Sentiment': 'label'})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.248357Z","iopub.execute_input":"2025-04-10T07:55:54.248537Z","iopub.status.idle":"2025-04-10T07:55:54.252897Z","shell.execute_reply.started":"2025-04-10T07:55:54.248522Z","shell.execute_reply":"2025-04-10T07:55:54.252012Z"}},"outputs":[],"execution_count":43},{"cell_type":"markdown","source":"# Train-test split","metadata":{}},{"cell_type":"code","source":"#fix class imbalance with train-test split\ntrain, test = train_test_split(encoded_dataset, test_size = 0.3, \n                               random_state = 42, \n                               stratify = encoded_dataset['label'])\n\ntrain.to_csv(\"train.csv\", index=True)\ntest.to_csv(\"test.csv\", index=True)","metadata":{"_uuid":"8a02dc0b-2732-4043-8d37-73e913fdd3bc","_cell_guid":"a7ae5be6-d4dc-47dd-a63a-6fb05c0b5e73","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.253782Z","iopub.execute_input":"2025-04-10T07:55:54.254048Z","iopub.status.idle":"2025-04-10T07:55:54.357974Z","shell.execute_reply.started":"2025-04-10T07:55:54.254029Z","shell.execute_reply":"2025-04-10T07:55:54.357373Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":44},{"cell_type":"markdown","source":"# Converting pandas dataframe to HuggingFace Dataset","metadata":{}},{"cell_type":"code","source":"train_hf = Dataset.from_pandas(train.reset_index(drop= True))\ntest_hf = Dataset.from_pandas(test.reset_index(drop= True))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.35997Z","iopub.execute_input":"2025-04-10T07:55:54.360215Z","iopub.status.idle":"2025-04-10T07:55:54.395847Z","shell.execute_reply.started":"2025-04-10T07:55:54.360195Z","shell.execute_reply":"2025-04-10T07:55:54.39522Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"print(train_hf[:1])","metadata":{"_uuid":"2bd4d6bb-2410-45e8-a2ad-556690b0d772","_cell_guid":"4fab2b72-f38e-4a4b-8b0b-47cd66dd9749","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.396992Z","iopub.execute_input":"2025-04-10T07:55:54.397204Z","iopub.status.idle":"2025-04-10T07:55:54.401565Z","shell.execute_reply.started":"2025-04-10T07:55:54.397187Z","shell.execute_reply":"2025-04-10T07:55:54.400665Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"{'text': ['the announcer here and on the direct is so good she sounds so energetic and passionate and it fits the game really well and gets me excited to play even more i am so unbelievably hyped up for this game omg i’ve been a fan of splatoon one but i didn’t get a hold of the game until splatoon 2 cause i was poor lol i legit can’t wait to play this every day'], 'label': [2]}\n","output_type":"stream"}],"execution_count":46},{"cell_type":"code","source":"print(test_hf[:1])","metadata":{"_uuid":"ffbe3251-9a3c-4301-8b31-0d61060c8c83","_cell_guid":"d4dc7a0f-0071-48eb-932f-d2e865b7f811","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.402459Z","iopub.execute_input":"2025-04-10T07:55:54.402672Z","iopub.status.idle":"2025-04-10T07:55:54.415841Z","shell.execute_reply.started":"2025-04-10T07:55:54.402653Z","shell.execute_reply":"2025-04-10T07:55:54.414922Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"{'text': ['ive learnt so much from youtube without it i wouldnt be who i am now but at the same time i know it distracts me from my goals and causes procrastination its such a double edged sword'], 'label': [1]}\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"datasets = DatasetDict({ 'train': train_hf, 'test' : test_hf})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.416766Z","iopub.execute_input":"2025-04-10T07:55:54.417033Z","iopub.status.idle":"2025-04-10T07:55:54.427778Z","shell.execute_reply.started":"2025-04-10T07:55:54.417008Z","shell.execute_reply":"2025-04-10T07:55:54.427082Z"}},"outputs":[],"execution_count":48},{"cell_type":"markdown","source":"# Text tokenization in dataset","metadata":{}},{"cell_type":"code","source":"tokenizer = AutoTokenizer.from_pretrained('distilbert-base-uncased')\n\ndef tokenizer_function(dataset):\n    comments = [str(comment) for comment in dataset['text']]\n    return tokenizer(comments, padding = 'max_length',truncation = True)\n\ntokenized_datasets = datasets.map(tokenizer_function, batched= True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:55:54.428491Z","iopub.execute_input":"2025-04-10T07:55:54.428771Z","iopub.status.idle":"2025-04-10T07:56:00.704951Z","shell.execute_reply.started":"2025-04-10T07:55:54.428743Z","shell.execute_reply":"2025-04-10T07:56:00.704222Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/12885 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9e80d00b48a9467e8abbd8aa78d3887a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/5523 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c4c1b6f3f9084accb69d4bee9c9c33b4"}},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"tokenized_datasets = tokenized_datasets.remove_columns(['text'])\ntokenized_datasets.set_format('tf')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:56:00.705971Z","iopub.execute_input":"2025-04-10T07:56:00.706266Z","iopub.status.idle":"2025-04-10T07:56:00.713Z","shell.execute_reply.started":"2025-04-10T07:56:00.706244Z","shell.execute_reply":"2025-04-10T07:56:00.712329Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"print(tokenized_datasets['train'][0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:56:00.71388Z","iopub.execute_input":"2025-04-10T07:56:00.714167Z","iopub.status.idle":"2025-04-10T07:56:00.730834Z","shell.execute_reply.started":"2025-04-10T07:56:00.714126Z","shell.execute_reply":"2025-04-10T07:56:00.729992Z"}},"outputs":[{"name":"stdout","text":"{'label': <tf.Tensor: shape=(), dtype=int64, numpy=2>, 'input_ids': <tf.Tensor: shape=(512,), dtype=int64, numpy=\narray([  101,  1996, 14073,  2182,  1998,  2006,  1996,  3622,  2003,\n        2061,  2204,  2016,  4165,  2061, 18114,  1998, 13459,  1998,\n        2009, 16142,  1996,  2208,  2428,  2092,  1998,  4152,  2033,\n        7568,  2000,  2377,  2130,  2062,  1045,  2572,  2061,  4895,\n        8671,  2666,  3567,  6321,  1044, 18863,  2094,  2039,  2005,\n        2023,  2208, 18168,  2290,  1045,  1521,  2310,  2042,  1037,\n        5470,  1997, 11867, 20051,  7828,  2028,  2021,  1045,  2134,\n        1521,  1056,  2131,  1037,  2907,  1997,  1996,  2208,  2127,\n       11867, 20051,  7828,  1016,  3426,  1045,  2001,  3532,  8840,\n        2140,  1045,  4190,  4183,  2064,  1521,  1056,  3524,  2000,\n        2377,  2023,  2296,  2154,   102,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0])>, 'attention_mask': <tf.Tensor: shape=(512,), dtype=int64, numpy=\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0])>}\n","output_type":"stream"}],"execution_count":51},{"cell_type":"markdown","source":"# Loading Distil Bert model for fine-tuning","metadata":{}},{"cell_type":"code","source":"model = SeqModClf.from_pretrained('distilbert-base-uncased', num_labels = 3)\n\ndevice  =  torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\nprint(f'model moved to {device}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:56:00.731697Z","iopub.execute_input":"2025-04-10T07:56:00.731995Z","iopub.status.idle":"2025-04-10T07:56:00.970992Z","shell.execute_reply.started":"2025-04-10T07:56:00.731968Z","shell.execute_reply":"2025-04-10T07:56:00.970225Z"}},"outputs":[{"name":"stderr","text":"Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"},{"name":"stdout","text":"model moved to cuda\n","output_type":"stream"}],"execution_count":52},{"cell_type":"markdown","source":"# Defining Training Arguments","metadata":{}},{"cell_type":"code","source":"training_args = TrainingArguments(\n    output_dir = '/kaggle/working/',\n    num_train_epochs = 3,\n    per_device_train_batch_size = 16,\n    per_device_eval_batch_size = 64,\n    warmup_steps = 500,\n    weight_decay = 0.01,\n    evaluation_strategy = 'epoch',\n    save_strategy = 'epoch',\n    load_best_model_at_end = True,\n    metric_for_best_model = 'eval_f1_score',\n    greater_is_better = True,\n    report_to = 'none',\n    fp16 = torch.cuda.is_available()\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:56:00.97171Z","iopub.execute_input":"2025-04-10T07:56:00.971915Z","iopub.status.idle":"2025-04-10T07:56:00.999708Z","shell.execute_reply.started":"2025-04-10T07:56:00.971898Z","shell.execute_reply":"2025-04-10T07:56:00.998898Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/transformers/training_args.py:1575: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"}],"execution_count":53},{"cell_type":"markdown","source":"# Compute metrics as function for trainer Config","metadata":{}},{"cell_type":"code","source":"def compute_metrics(pred):\n    logits, labels = pred\n    predictions = numpy.argmax(logits, axis = -1)\n    Accuracy_score = accuracy_score(labels,predictions)\n    F1_score = f1_score(labels, predictions, average = 'weighted')\n    return {'accuracy_score':Accuracy_score,'f1_score':F1_score}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:56:01.000622Z","iopub.execute_input":"2025-04-10T07:56:01.000921Z","iopub.status.idle":"2025-04-10T07:56:01.005297Z","shell.execute_reply.started":"2025-04-10T07:56:01.000892Z","shell.execute_reply":"2025-04-10T07:56:01.004433Z"}},"outputs":[],"execution_count":54},{"cell_type":"markdown","source":"# Trainer Config","metadata":{}},{"cell_type":"code","source":"trainer = Trainer(\n    model = model,\n    args = training_args,\n    train_dataset = tokenized_datasets['train'],\n    eval_dataset = tokenized_datasets['test'],\n    tokenizer = tokenizer,\n    compute_metrics = compute_metrics\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:56:01.006242Z","iopub.execute_input":"2025-04-10T07:56:01.006518Z","iopub.status.idle":"2025-04-10T07:56:01.027995Z","shell.execute_reply.started":"2025-04-10T07:56:01.006486Z","shell.execute_reply":"2025-04-10T07:56:01.027175Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-55-b7a90297434a>:1: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n  trainer = Trainer(\n","output_type":"stream"}],"execution_count":55},{"cell_type":"markdown","source":"# Training","metadata":{}},{"cell_type":"code","source":"trainer.train()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T07:56:01.028851Z","iopub.execute_input":"2025-04-10T07:56:01.029105Z","iopub.status.idle":"2025-04-10T08:15:33.865333Z","shell.execute_reply.started":"2025-04-10T07:56:01.029076Z","shell.execute_reply":"2025-04-10T08:15:33.864428Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='2418' max='2418' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [2418/2418 19:31, Epoch 3/3]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy Score</th>\n      <th>F1 Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.608700</td>\n      <td>0.418560</td>\n      <td>0.828535</td>\n      <td>0.828738</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.289100</td>\n      <td>0.393126</td>\n      <td>0.843744</td>\n      <td>0.843146</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.174100</td>\n      <td>0.570433</td>\n      <td>0.845917</td>\n      <td>0.844720</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=2418, training_loss=0.3271919720620533, metrics={'train_runtime': 1172.3786, 'train_samples_per_second': 32.971, 'train_steps_per_second': 2.062, 'total_flos': 5120618612382720.0, 'train_loss': 0.3271919720620533, 'epoch': 3.0})"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"print(trainer.evaluate())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T08:15:33.866185Z","iopub.execute_input":"2025-04-10T08:15:33.866427Z","iopub.status.idle":"2025-04-10T08:16:22.119969Z","shell.execute_reply.started":"2025-04-10T08:15:33.866405Z","shell.execute_reply":"2025-04-10T08:16:22.119182Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='87' max='87' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [87/87 00:47]\n    </div>\n    "},"metadata":{}},{"name":"stdout","text":"{'eval_loss': 0.5704334378242493, 'eval_accuracy_score': 0.8459170740539562, 'eval_f1_score': 0.8447197586020548, 'eval_runtime': 48.2463, 'eval_samples_per_second': 114.475, 'eval_steps_per_second': 1.803, 'epoch': 3.0}\n","output_type":"stream"}],"execution_count":57},{"cell_type":"markdown","source":"# Saving model","metadata":{}},{"cell_type":"code","source":"trainer.save_model('/kaggle/working/distilbert-base-uncased-finetuned-youtube-comment-sentiment')\ntokenizer.save_pretrained('/kaggle/working/distilbert-base-uncased-finetuned-youtube-comment-sentiment-tokenizer')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T08:16:22.120742Z","iopub.execute_input":"2025-04-10T08:16:22.120975Z","iopub.status.idle":"2025-04-10T08:16:23.046183Z","shell.execute_reply.started":"2025-04-10T08:16:22.120953Z","shell.execute_reply":"2025-04-10T08:16:23.04524Z"}},"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"('/kaggle/working/distilbert-base-uncased-finetuned-youtube-comment-sentiment-tokenizer/tokenizer_config.json',\n '/kaggle/working/distilbert-base-uncased-finetuned-youtube-comment-sentiment-tokenizer/special_tokens_map.json',\n '/kaggle/working/distilbert-base-uncased-finetuned-youtube-comment-sentiment-tokenizer/vocab.txt',\n '/kaggle/working/distilbert-base-uncased-finetuned-youtube-comment-sentiment-tokenizer/added_tokens.json',\n '/kaggle/working/distilbert-base-uncased-finetuned-youtube-comment-sentiment-tokenizer/tokenizer.json')"},"metadata":{}}],"execution_count":58},{"cell_type":"markdown","source":"# Inference","metadata":{}},{"cell_type":"code","source":"\n\nsentiment_classifier = pipeline(\n    'sentiment-analysis',\n    model = '/kaggle/working/distilbert-base-uncased-finetuned-youtube-comment-sentiment',\n    tokenizer = '/kaggle/working/distilbert-base-uncased-finetuned-youtube-comment-sentiment-tokenizer',\n    device = 0 if torch.cuda.is_available() else -1\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T08:16:23.047106Z","iopub.execute_input":"2025-04-10T08:16:23.047465Z","iopub.status.idle":"2025-04-10T08:16:23.203036Z","shell.execute_reply.started":"2025-04-10T08:16:23.047434Z","shell.execute_reply":"2025-04-10T08:16:23.202103Z"}},"outputs":[{"name":"stderr","text":"Device set to use cuda:0\n","output_type":"stream"}],"execution_count":59},{"cell_type":"code","source":"\nnew_comment_1 = \"This is an amazing tutorial, very helpful!\"\nnew_comment_2 = \"I am quite confused by this explanation.\"\nnew_comment_3 = \"It's okay, neither good nor bad.\"\n\npredictions = sentiment_classifier([new_comment_1, new_comment_2, new_comment_3])\n\nfor comment, prediction in zip([new_comment_1, new_comment_2, new_comment_3], predictions):\n    print(f\"Comment: \\\"{comment}\\\"\")\n    predicted_label_str = prediction['label']\n    predicted_label_int = int(predicted_label_str.split('_')[-1])\n    score = prediction['score']\n    print(f\"Predicted Sentiment (Label): {predicted_label_int} (Confidence: {score:.4f})\")\n   ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T08:16:23.205799Z","iopub.execute_input":"2025-04-10T08:16:23.206045Z","iopub.status.idle":"2025-04-10T08:16:23.231671Z","shell.execute_reply.started":"2025-04-10T08:16:23.206025Z","shell.execute_reply":"2025-04-10T08:16:23.230515Z"}},"outputs":[{"name":"stdout","text":"Comment: \"This is an amazing tutorial, very helpful!\"\nPredicted Sentiment (Label): 2 (Confidence: 0.9995)\nComment: \"I am quite confused by this explanation.\"\nPredicted Sentiment (Label): 0 (Confidence: 0.9817)\nComment: \"It's okay, neither good nor bad.\"\nPredicted Sentiment (Label): 2 (Confidence: 0.9694)\n","output_type":"stream"}],"execution_count":60},{"cell_type":"code","source":"#torch.cuda.empty_cache()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T08:16:23.233037Z","iopub.execute_input":"2025-04-10T08:16:23.233373Z","iopub.status.idle":"2025-04-10T08:16:23.237339Z","shell.execute_reply.started":"2025-04-10T08:16:23.233342Z","shell.execute_reply":"2025-04-10T08:16:23.236434Z"}},"outputs":[],"execution_count":61}]}